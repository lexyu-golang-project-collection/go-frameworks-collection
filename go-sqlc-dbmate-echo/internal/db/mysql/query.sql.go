// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package mysql

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :execresult
INSERT INTO authors (
    name, bio
) VALUES (
    ?, ?
)
`

type CreateAuthorParams struct {
	Name string         `json:"name"`
	Bio  sql.NullString `json:"bio"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (sql.Result, error) {
	return q.exec(ctx, q.createAuthorStmt, createAuthor, arg.Name, arg.Bio)
}

const createBook = `-- name: CreateBook :execresult
INSERT INTO books (
    title, author_id, published_year, genre, description
) VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateBookParams struct {
	Title         string         `json:"title"`
	AuthorID      int32          `json:"author_id"`
	PublishedYear sql.NullInt32  `json:"published_year"`
	Genre         sql.NullString `json:"genre"`
	Description   sql.NullString `json:"description"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (sql.Result, error) {
	return q.exec(ctx, q.createBookStmt, createBook,
		arg.Title,
		arg.AuthorID,
		arg.PublishedYear,
		arg.Genre,
		arg.Description,
	)
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteAuthorStmt, deleteAuthor, id)
	return err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = ?
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteBookStmt, deleteBook, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int32) (Author, error) {
	row := q.queryRow(ctx, q.getAuthorStmt, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const getBook = `-- name: GetBook :one
SELECT b.id, b.title, b.author_id, b.published_year, b.genre, b.description, b.created_at, b.updated_at, a.name as author_name
FROM books b
JOIN authors a ON b.author_id = a.id
WHERE b.id = ? LIMIT 1
`

type GetBookRow struct {
	ID            int32          `json:"id"`
	Title         string         `json:"title"`
	AuthorID      int32          `json:"author_id"`
	PublishedYear sql.NullInt32  `json:"published_year"`
	Genre         sql.NullString `json:"genre"`
	Description   sql.NullString `json:"description"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	AuthorName    string         `json:"author_name"`
}

func (q *Queries) GetBook(ctx context.Context, id int32) (GetBookRow, error) {
	row := q.queryRow(ctx, q.getBookStmt, getBook, id)
	var i GetBookRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.PublishedYear,
		&i.Genre,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorName,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.query(ctx, q.listAuthorsStmt, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBooks = `-- name: ListBooks :many
SELECT b.id, b.title, b.author_id, b.published_year, b.genre, b.description, b.created_at, b.updated_at, a.name as author_name
FROM books b
JOIN authors a ON b.author_id = a.id
ORDER BY b.title
`

type ListBooksRow struct {
	ID            int32          `json:"id"`
	Title         string         `json:"title"`
	AuthorID      int32          `json:"author_id"`
	PublishedYear sql.NullInt32  `json:"published_year"`
	Genre         sql.NullString `json:"genre"`
	Description   sql.NullString `json:"description"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	AuthorName    string         `json:"author_name"`
}

func (q *Queries) ListBooks(ctx context.Context) ([]ListBooksRow, error) {
	rows, err := q.query(ctx, q.listBooksStmt, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBooksRow
	for rows.Next() {
		var i ListBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.AuthorID,
			&i.PublishedYear,
			&i.Genre,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBooksByAuthor = `-- name: ListBooksByAuthor :many
SELECT id, title, author_id, published_year, genre, description, created_at, updated_at FROM books
WHERE author_id = ?
ORDER BY title
`

func (q *Queries) ListBooksByAuthor(ctx context.Context, authorID int32) ([]Book, error) {
	rows, err := q.query(ctx, q.listBooksByAuthorStmt, listBooksByAuthor, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.AuthorID,
			&i.PublishedYear,
			&i.Genre,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :execresult
UPDATE authors
SET name = ?,
    bio = ?
WHERE id = ?
`

type UpdateAuthorParams struct {
	Name string         `json:"name"`
	Bio  sql.NullString `json:"bio"`
	ID   int32          `json:"id"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (sql.Result, error) {
	return q.exec(ctx, q.updateAuthorStmt, updateAuthor, arg.Name, arg.Bio, arg.ID)
}

const updateBook = `-- name: UpdateBook :execresult
UPDATE books
SET title = ?,
    author_id = ?,
    published_year = ?,
    genre = ?,
    description = ?
WHERE id = ?
`

type UpdateBookParams struct {
	Title         string         `json:"title"`
	AuthorID      int32          `json:"author_id"`
	PublishedYear sql.NullInt32  `json:"published_year"`
	Genre         sql.NullString `json:"genre"`
	Description   sql.NullString `json:"description"`
	ID            int32          `json:"id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (sql.Result, error) {
	return q.exec(ctx, q.updateBookStmt, updateBook,
		arg.Title,
		arg.AuthorID,
		arg.PublishedYear,
		arg.Genre,
		arg.Description,
		arg.ID,
	)
}
