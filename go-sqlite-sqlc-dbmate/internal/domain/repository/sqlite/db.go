// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlite

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.getDistinctCityAndCustomerOrderByCountryStmt, err = db.PrepareContext(ctx, GetDistinctCityAndCustomerOrderByCountry); err != nil {
		return nil, fmt.Errorf("error preparing query GetDistinctCityAndCustomerOrderByCountry: %w", err)
	}
	if q.getDistinctCityOrderByCityStmt, err = db.PrepareContext(ctx, GetDistinctCityOrderByCity); err != nil {
		return nil, fmt.Errorf("error preparing query GetDistinctCityOrderByCity: %w", err)
	}
	if q.getDistinctCompanyStmt, err = db.PrepareContext(ctx, GetDistinctCompany); err != nil {
		return nil, fmt.Errorf("error preparing query GetDistinctCompany: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.getDistinctCityAndCustomerOrderByCountryStmt != nil {
		if cerr := q.getDistinctCityAndCustomerOrderByCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDistinctCityAndCustomerOrderByCountryStmt: %w", cerr)
		}
	}
	if q.getDistinctCityOrderByCityStmt != nil {
		if cerr := q.getDistinctCityOrderByCityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDistinctCityOrderByCityStmt: %w", cerr)
		}
	}
	if q.getDistinctCompanyStmt != nil {
		if cerr := q.getDistinctCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDistinctCompanyStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                           DBTX
	tx                                           *sql.Tx
	getDistinctCityAndCustomerOrderByCountryStmt *sql.Stmt
	getDistinctCityOrderByCityStmt               *sql.Stmt
	getDistinctCompanyStmt                       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db: tx,
		tx: tx,
		getDistinctCityAndCustomerOrderByCountryStmt: q.getDistinctCityAndCustomerOrderByCountryStmt,
		getDistinctCityOrderByCityStmt:               q.getDistinctCityOrderByCityStmt,
		getDistinctCompanyStmt:                       q.getDistinctCompanyStmt,
	}
}
