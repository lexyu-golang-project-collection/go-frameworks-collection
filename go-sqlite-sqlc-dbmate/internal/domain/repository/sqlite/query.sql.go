// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlite

import (
	"context"
	"database/sql"
)

const GetDistinctCityAndCustomerOrderByCountry = `-- name: GetDistinctCityAndCustomerOrderByCountry :many
SELECT DISTINCT
  city,
  country
FROM
  customers
ORDER BY
  country
`

type GetDistinctCityAndCustomerOrderByCountryRow struct {
	City    sql.NullString `json:"city"`
	Country sql.NullString `json:"country"`
}

func (q *Queries) GetDistinctCityAndCustomerOrderByCountry(ctx context.Context) ([]GetDistinctCityAndCustomerOrderByCountryRow, error) {
	rows, err := q.query(ctx, q.getDistinctCityAndCustomerOrderByCountryStmt, GetDistinctCityAndCustomerOrderByCountry)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDistinctCityAndCustomerOrderByCountryRow{}
	for rows.Next() {
		var i GetDistinctCityAndCustomerOrderByCountryRow
		if err := rows.Scan(&i.City, &i.Country); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDistinctCityOrderByCity = `-- name: GetDistinctCityOrderByCity :many
SELECT DISTINCT city
FROM customers
ORDER BY city
`

func (q *Queries) GetDistinctCityOrderByCity(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.query(ctx, q.getDistinctCityOrderByCityStmt, GetDistinctCityOrderByCity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []sql.NullString{}
	for rows.Next() {
		var city sql.NullString
		if err := rows.Scan(&city); err != nil {
			return nil, err
		}
		items = append(items, city)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDistinctCompany = `-- name: GetDistinctCompany :many
SELECT DISTINCT
  company
FROM
  customers
`

func (q *Queries) GetDistinctCompany(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.query(ctx, q.getDistinctCompanyStmt, GetDistinctCompany)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []sql.NullString{}
	for rows.Next() {
		var company sql.NullString
		if err := rows.Scan(&company); err != nil {
			return nil, err
		}
		items = append(items, company)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
