// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package mysql

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :execresult
INSERT INTO authors (name, bio)
VALUES (?, ?)
`

type CreateAuthorParams struct {
	Name string         `json:"name"`
	Bio  sql.NullString `json:"bio"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (sql.Result, error) {
	return q.exec(ctx, q.createAuthorStmt, createAuthor, arg.Name, arg.Bio)
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteAuthorStmt, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio
FROM authors
WHERE id = ?
`

func (q *Queries) GetAuthor(ctx context.Context, id int32) (Author, error) {
	row := q.queryRow(ctx, q.getAuthorStmt, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const getAuthorById = `-- name: GetAuthorById :one
SELECT id, name, bio FROM authors
WHERE id = LAST_INSERT_ID()
`

func (q *Queries) GetAuthorById(ctx context.Context) (Author, error) {
	row := q.queryRow(ctx, q.getAuthorByIdStmt, getAuthorById)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const getUpdatedAuthor = `-- name: GetUpdatedAuthor :one
SELECT id, name, bio FROM authors
WHERE id = ?
`

func (q *Queries) GetUpdatedAuthor(ctx context.Context, id int32) (Author, error) {
	row := q.queryRow(ctx, q.getUpdatedAuthorStmt, getUpdatedAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio
FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.query(ctx, q.listAuthorsStmt, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE authors
set name = ?,
    bio = ?
WHERE id = ?
`

type UpdateAuthorParams struct {
	Name string         `json:"name"`
	Bio  sql.NullString `json:"bio"`
	ID   int32          `json:"id"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.exec(ctx, q.updateAuthorStmt, updateAuthor, arg.Name, arg.Bio, arg.ID)
	return err
}
